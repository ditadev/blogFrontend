{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { catchError, throwError, retry } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class ApiService {\n  constructor() {\n    this.authorUrl = `http://localhost:5259/api/Author`;\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n    this.headers = {\n      new: HttpHeaders({\n        'Content-Type': 'multipart/form-data'\n      }),\n      constructor(http) {},\n      registerAuthor(author) {\n        return this.http.post(`${this.authorUrl}/Register`, author, this.httpOptions).pipe(retry(1), catchError(this.handleError));\n      },\n      verifyAuthor(email, token) {\n        return this.http.patch(`${this.authorUrl}/VerifyUser?emailAddress=${email}&token=${token}`, this.httpOptions).pipe(retry(1), catchError(this.handleError));\n      },\n      login(author) {\n        return this.http.post(`${this.authorUrl}/Login`, author, this.httpOptions).pipe(retry(1), catchError(this.handleError));\n      },\n      forgotPassword(email) {\n        return this.http.post(`${this.authorUrl}/ForgotPassword?emailAddress=${email}`, this.httpOptions).pipe(retry(1), catchError(this.handleError));\n      },\n      resetPassword(data) {\n        const formData = new FormData();\n        for (const key in data) {\n          if (data.hasOwnProperty(key)) {\n            formData.append(key, data[key]);\n          }\n        }\n        return this.http.patch(`${this.authorUrl}/ResetPassword`, formData, {\n          headers: new HttpHeaders({\n            'Content-Type': 'multipart/form-data'\n          })\n        }).pipe(retry(1), catchError(this.handleError));\n      },\n      handleError(error) {\n        let errorMessage = '';\n        if (error.error instanceof ErrorEvent) {\n          // Get client-side error\n          errorMessage = error.error.message;\n        } else {\n          // Get server-side error\n          errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n        }\n        window.alert(errorMessage);\n        return throwError(() => {\n          return errorMessage;\n        });\n      }\n    };\n  }\n}\nApiService.ɵfac = function ApiService_Factory(t) {\n  return new (t || ApiService)();\n};\nApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApiService,\n  factory: ApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","catchError","throwError","retry","ApiService","constructor","headers","new","http","registerAuthor","author","post","authorUrl","httpOptions","pipe","handleError","verifyAuthor","email","token","patch","login","forgotPassword","resetPassword","data","formData","FormData","key","hasOwnProperty","append","error","errorMessage","ErrorEvent","message","status","window","alert","factory","providedIn"],"sourceRoot":"","sources":["/Users/abb/sources/inyakaabraham/Hobby-Project/blogFrontend/src/app/services/api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { catchError, Observable, throwError,retry } from 'rxjs';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n\n  private authorUrl = `http://localhost:5259/api/Author`;\n\n  httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  };\n  \n  headers = {new HttpHeaders({ 'Content-Type': 'multipart/form-data' });\n\n\n  constructor(private http:HttpClient) { }\n\n  public registerAuthor(author: any): Observable<any> {\n    return this.http.post(`${this.authorUrl}/Register`, author, this.httpOptions).pipe(retry(1), catchError(this.handleError));\n  }\n\n  public verifyAuthor(email: string, token:string): Observable<any> {\n    return this.http.patch(`${this.authorUrl}/VerifyUser?emailAddress=${email}&token=${token}`, this.httpOptions).pipe(retry(1), catchError(this.handleError));\n  }\n\n   public login(author: any): Observable<any> {\n    return this.http.post(`${this.authorUrl}/Login`, author, this.httpOptions).pipe(retry(1), catchError(this.handleError));\n  }\n\n  public forgotPassword(email: string): Observable<any> {\n    return this.http.post(`${this.authorUrl}/ForgotPassword?emailAddress=${email}`, this.httpOptions).pipe(retry(1), catchError(this.handleError));\n  }\n\n  public resetPassword(data: any):Observable<any>{\n    const formData = new FormData();\n    for (const key in data) {\n      if (data.hasOwnProperty(key)) {\n        formData.append(key, data[key]);\n      }\n    }\n    return this.http.patch<any>(\n      `${this.authorUrl}/ResetPassword`,\n      formData,\n      { headers: new HttpHeaders({ 'Content-Type': 'multipart/form-data' }) }\n    ).pipe(retry(1), catchError(this.handleError));\n  }\n\n  handleError(error: any) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Get client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Get server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    window.alert(errorMessage);\n    return throwError(() => {\n      return errorMessage;\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}