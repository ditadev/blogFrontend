{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { catchError, throwError, retry } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  constructor(http) {\n    this.http = http;\n    this.authorUrl = `http://localhost:5259/api/Author`;\n    this.boundary = `----WebKitFormBoundary${Math.random().toString(36).substr(2)}`;\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n    this.headerOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': `multipart/form-data; boundary=${this.boundary}`\n      })\n    };\n  }\n  registerAuthor(author) {\n    return this.http.post(`${this.authorUrl}/Register`, author, this.httpOptions).pipe(retry(1), catchError(this.handleError));\n  }\n  verifyAuthor(email, token) {\n    return this.http.patch(`${this.authorUrl}/VerifyUser?emailAddress=${email}&token=${token}`, this.httpOptions).pipe(retry(1), catchError(this.handleError));\n  }\n  login(author) {\n    return this.http.post(`${this.authorUrl}/Login`, author, this.httpOptions).pipe(retry(1), catchError(this.handleError));\n  }\n  forgotPassword(email) {\n    return this.http.post(`${this.authorUrl}/ForgotPassword?emailAddress=${email}`, this.httpOptions).pipe(retry(1), catchError(this.handleError));\n  }\n  resetPassword(data) {\n    const formData = new FormData();\n    formData.append('emailAddress', data.emailAddress);\n    formData.append('Token', data.Token);\n    formData.append('Password', data.Password);\n    formData.append('ConfirmPassword', data.ConfirmPassword);\n    return this.http.patch(`${this.authorUrl}/ResetPassword`, formData, this.headerOptions).pipe(retry(1), catchError(this.handleError));\n  }\n  handleError(error) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Get client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Get server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    window.alert(errorMessage);\n    return throwError(() => {\n      return errorMessage;\n    });\n  }\n}\nApiService.ɵfac = function ApiService_Factory(t) {\n  return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n};\nApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApiService,\n  factory: ApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","catchError","throwError","retry","ApiService","constructor","http","Math","random","toString","substr","headers","boundary","registerAuthor","author","post","authorUrl","httpOptions","pipe","handleError","verifyAuthor","email","token","patch","login","forgotPassword","resetPassword","data","formData","FormData","append","emailAddress","Token","Password","ConfirmPassword","headerOptions","error","errorMessage","ErrorEvent","message","status","window","alert","factory","providedIn"],"sourceRoot":"","sources":["/Users/abb/sources/inyakaabraham/Hobby-Project/blogFrontend/src/app/services/api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { catchError, Observable, throwError,retry } from 'rxjs';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n\n  private authorUrl = `http://localhost:5259/api/Author`;\n  boundary = `----WebKitFormBoundary${Math.random().toString(36).substr(2)}`;\n\n  httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  };\n  \n  const headerOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': `multipart/form-data; boundary=${this.boundary}`\n    })\n  };\n\n\n  constructor(private http:HttpClient) { }\n\n  public registerAuthor(author: any): Observable<any> {\n    return this.http.post(`${this.authorUrl}/Register`, author, this.httpOptions).pipe(retry(1), catchError(this.handleError));\n  }\n\n  public verifyAuthor(email: string, token:string): Observable<any> {\n    return this.http.patch(`${this.authorUrl}/VerifyUser?emailAddress=${email}&token=${token}`, this.httpOptions).pipe(retry(1), catchError(this.handleError));\n  }\n\n   public login(author: any): Observable<any> {\n    return this.http.post(`${this.authorUrl}/Login`, author, this.httpOptions).pipe(retry(1), catchError(this.handleError));\n  }\n\n  public forgotPassword(email: string): Observable<any> {\n    return this.http.post(`${this.authorUrl}/ForgotPassword?emailAddress=${email}`, this.httpOptions).pipe(retry(1), catchError(this.handleError));\n  }\n\n  public resetPassword(data: any):Observable<any>{\n    const formData = new FormData();\n\n    formData.append('emailAddress', data.emailAddress);\n    formData.append('Token', data.Token);\n    formData.append('Password', data.Password);\n    formData.append('ConfirmPassword', data.ConfirmPassword);\n\n    return this.http.patch(\n      `${this.authorUrl}/ResetPassword`, formData, this.headerOptions)\n      .pipe(retry(1), catchError(this.handleError));\n  }\n\n  handleError(error: any) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Get client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Get server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    window.alert(errorMessage);\n    return throwError(() => {\n      return errorMessage;\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}