{"ast":null,"code":"import { HttpHeaders, HttpRequest } from '@angular/common/http';\nimport { catchError, throwError, retry } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  constructor(http) {\n    this.http = http;\n    this.authorUrl = `http://localhost:5259/api/Author`;\n    this.articleUrl = `http://localhost:5259/api/Blog`;\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  registerAuthor(author) {\n    return this.http.post(`${this.authorUrl}/Register`, author, this.httpOptions).pipe(retry(1), catchError(this.handleError));\n  }\n  verifyAuthor(email, token) {\n    return this.http.patch(`${this.authorUrl}/VerifyUser?emailAddress=${email}&token=${token}`, this.httpOptions).pipe(retry(1), catchError(this.handleError));\n  }\n  login(author) {\n    return this.http.post(`${this.authorUrl}/Login`, author, this.httpOptions).pipe(retry(1), catchError(this.handleError));\n  }\n  forgotPassword(email) {\n    return this.http.post(`${this.authorUrl}/ForgotPassword?emailAddress=${email}`, this.httpOptions).pipe(retry(1), catchError(this.handleError));\n  }\n  resetPassword(author) {\n    return this.http.patch(`${this.authorUrl}/ResetPassword`, author, this.httpOptions).pipe(retry(1), catchError(this.handleError));\n  }\n  getUser(id) {\n    const url = `${this.authorUrl}/GetAuthorById?id=${id}`;\n    return this.http.get(url).pipe(retry(1), catchError(this.handleError));\n  }\n  getArticles() {\n    const url = `${this.articleUrl}/GetAllPosts`;\n    return this.http.get(url).pipe(retry(1), catchError(this.handleError));\n  }\n  getRecentArticles() {\n    const url = `${this.articleUrl}/GetRecentPost`;\n    return this.http.get(url).pipe(retry(1), catchError(this.handleError));\n  }\n  getArticlesByAuthor(id) {\n    const url = `${this.articleUrl}/GetPostByAuthor/${id}`;\n    return this.http.get(url).pipe(retry(1), catchError(this.handleError));\n  }\n  getArticle(postId) {\n    const url = `${this.articleUrl}/GetPostById/${postId}`;\n    return this.http.get(url).pipe(retry(1), catchError(this.handleError));\n  }\n  deleteArticle(postId) {\n    const url = `${this.articleUrl}/DeletePost/${postId}`;\n    return this.http.delete(url).pipe(retry(1), catchError(this.handleError));\n  }\n  updateArticle(postId, article) {\n    const url = `${this.articleUrl}/UpdatePost?id=${postId}`;\n    const headers = new HttpHeaders({\n      'Content-Type': 'multipart/form-data',\n      'accept': 'text/plain'\n    });\n    const formData = new FormData();\n    formData.append('CoverImage', article.coverImagePath);\n    formData.append('Title', article.title);\n    formData.append('Summary', article.summary);\n    formData.append('Body', article.body);\n    formData.append('Tags', article.tags);\n    formData.append('CategoryName', article.category.categoryName);\n    return this.http.put(url, formData, {\n      headers\n    }).pipe(retry(1), catchError(this.handleError));\n  }\n  postArticle(article) {\n    const url = `${this.articleUrl}/AddPost`;\n    const headers = new HttpHeaders({\n      'Content-Type': 'multipart/form-data',\n      'accept': 'text/plain'\n    });\n    const formData = new FormData();\n    formData.append('CoverImage', article.coverImagePath);\n    formData.append('Title', article.title);\n    formData.append('Summary', article.summary);\n    formData.append('Body', article.body);\n    formData.append('Tags', article.tags);\n    formData.append('CategoryName', article.category.categoryName);\n    return this.http.post(url, formData, {\n      headers\n    }).pipe(retry(1), catchError(this.handleError));\n  }\n  PoostBlog(fileItem, extraData) {\n    const url = `${this.articleUrl}/AddPost`;\n    const formData = new FormData();\n    formData.append('fileItem', fileItem, fileItem.name);\n    if (extraData) {\n      for (let key in extraData) {\n        // iterate and set other form data\n        formData.append(key, extraData[key]);\n      }\n    }\n    const req = new HttpRequest('POST', apiCreateEndpoint, formData, {\n      reportProgress: true // for progress data\n    });\n\n    return this.http.request(req);\n  }\n  handleError(error) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Get client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Get server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    return throwError(() => {\n      console.log(errorMessage);\n      return errorMessage;\n    });\n  }\n}\nApiService.ɵfac = function ApiService_Factory(t) {\n  return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n};\nApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApiService,\n  factory: ApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","HttpRequest","catchError","throwError","retry","ApiService","constructor","http","headers","registerAuthor","author","post","authorUrl","httpOptions","pipe","handleError","verifyAuthor","email","token","patch","login","forgotPassword","resetPassword","getUser","id","url","get","getArticles","articleUrl","getRecentArticles","getArticlesByAuthor","getArticle","postId","deleteArticle","delete","updateArticle","article","formData","FormData","append","coverImagePath","title","summary","body","tags","category","categoryName","put","postArticle","PoostBlog","fileItem","extraData","name","key","req","apiCreateEndpoint","reportProgress","request","error","errorMessage","ErrorEvent","message","status","console","log","factory","providedIn"],"sourceRoot":"","sources":["/Users/abb/sources/inyakaabraham/Hobby-Project/blogFrontend/src/app/services/api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpEvent, HttpEventType, HttpHeaders, HttpRequest } from '@angular/common/http';\nimport { catchError, Observable, throwError,retry, map } from 'rxjs';\nimport { AuthorResponse } from '../models/author-response';\nimport { Article } from '../models/article';\nimport { BlogPost } from '../models/blogPost';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n\n  private authorUrl = `http://localhost:5259/api/Author`;\n  private articleUrl = `http://localhost:5259/api/Blog`;\n\n  httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  };\n \n  \n  constructor(private http:HttpClient) { }\n\n  public registerAuthor(author: any): Observable<any> {\n    return this.http.post(`${this.authorUrl}/Register`, author, this.httpOptions).pipe(retry(1), catchError(this.handleError));\n  }\n\n  public verifyAuthor(email: string, token:string): Observable<any> {\n    return this.http.patch(`${this.authorUrl}/VerifyUser?emailAddress=${email}&token=${token}`, this.httpOptions).pipe(retry(1), catchError(this.handleError));\n  }\n\n   public login(author: any): Observable<any> {\n    return this.http.post(`${this.authorUrl}/Login`, author, this.httpOptions).pipe(retry(1), catchError(this.handleError));\n  }\n\n  public forgotPassword(email: string): Observable<any> {\n    return this.http.post(`${this.authorUrl}/ForgotPassword?emailAddress=${email}`, this.httpOptions).pipe(retry(1), catchError(this.handleError));\n  }\n\n  public resetPassword(author: any):Observable<any>{\n    return this.http.patch(`${this.authorUrl}/ResetPassword`, author, this.httpOptions).pipe(retry(1), catchError(this.handleError));\n  }\n\n  public getUser(id: any):Observable<any>{\n    const url = `${this.authorUrl}/GetAuthorById?id=${id}`;\n    return this.http.get<AuthorResponse>(url).pipe(retry(1), catchError(this.handleError));\n  }\n\n  public getArticles(): Observable<any> {\n    const url = `${this.articleUrl}/GetAllPosts`;\n    return this.http.get<Article>(url).pipe(retry(1), catchError(this.handleError));\n    }\n\n    public getRecentArticles(): Observable<any> {\n      const url = `${this.articleUrl}/GetRecentPost`;\n      return this.http.get<Article>(url).pipe(retry(1), catchError(this.handleError));\n      }\n\n      public getArticlesByAuthor(id:any): Observable<any> {\n        const url = `${this.articleUrl}/GetPostByAuthor/${id}`;\n        return this.http.get<Article>(url).pipe(retry(1), catchError(this.handleError));\n        }\n\n    public getArticle(postId:any):Observable<any>{\n      const url = `${this.articleUrl}/GetPostById/${postId}`;\n      return this.http.get<Article>(url).pipe(retry(1), catchError(this.handleError));\n    }\n\n\n    deleteArticle(postId: any): Observable<any> {\n      const url = `${this.articleUrl}/DeletePost/${postId}`;\n      return this.http.delete<any>(url).pipe(\n        retry(1),\n        catchError(this.handleError)\n      );\n    }\n\n\n    public updateArticle(postId: any, article: BlogPost): Observable<any> {\n      const url = `${this.articleUrl}/UpdatePost?id=${postId}`;\n      const headers = new HttpHeaders({\n        'Content-Type': 'multipart/form-data',\n        'accept': 'text/plain'\n      });\n     \n      const formData = new FormData();\n      formData.append('CoverImage',article.coverImagePath)\n      formData.append('Title',article.title)\n      formData.append('Summary',article.summary)\n      formData.append('Body',article.body)\n      formData.append('Tags',article.tags)\n      formData.append('CategoryName',article.category.categoryName)\n      \n      return this.http.put(url, formData, { headers }).pipe(\n        retry(1),\n        catchError(this.handleError)\n      );\n    }\n    \n    postArticle(article:BlogPost):Observable<any>{\n      const url =`${this.articleUrl}/AddPost`;\n      const headers = new HttpHeaders({\n        'Content-Type': 'multipart/form-data',\n        'accept': 'text/plain'\n      });\n     \n      const formData = new FormData();\n      formData.append('CoverImage',article.coverImagePath)\n      formData.append('Title',article.title)\n      formData.append('Summary',article.summary)\n      formData.append('Body',article.body)\n      formData.append('Tags',article.tags)\n      formData.append('CategoryName',article.category.categoryName)\n    \n      return this.http.post(url,formData,{headers}).pipe(\n        retry(1),\n        catchError(this.handleError)\n      );\n    }\n\n    PoostBlog(fileItem:File, extraData?:object):ob{\n      const url =`${this.articleUrl}/AddPost`;\n      const formData: FormData = new FormData();\n\n      formData.append('fileItem', fileItem, fileItem.name);\n      if (extraData) {\n        for(let key in extraData){\n            // iterate and set other form data\n          formData.append(key, extraData[key])\n        }\n      }\n\n      const req = new HttpRequest('POST', apiCreateEndpoint, formData, {\n        reportProgress: true // for progress data\n      });\n      return this.http.request(req)\n    }\n\n  handleError(error: any) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Get client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Get server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    return throwError(() => {\n      console.log(errorMessage);\n      return errorMessage;\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}