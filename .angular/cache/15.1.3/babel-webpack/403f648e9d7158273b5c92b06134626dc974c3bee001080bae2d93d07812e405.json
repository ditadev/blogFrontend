{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@auth0/angular-jwt\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(jwtHelper, router) {\n    this.jwtHelper = jwtHelper;\n    this.router = router;\n  }\n  canActivate() {\n    //get the jwt token which are present in the local storage\n    const token = localStorage.getItem(\"jwt\");\n    //Check if the token is expired or not and if token is expired then redirect to login page and return false\n    if (token && !this.jwtHelper.isTokenExpired(token)) {\n      return true;\n    }\n    this.router.navigate([\"login\"]);\n    return false;\n  }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.JwtHelperService), i0.ɵɵinject(i2.Router));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAOA,OAAM,MAAOA,SAAS;EAElBC,YACUC,SAA2B,EAC3BC,MAAc;IADd,cAAS,GAATD,SAAS;IACT,WAAM,GAANC,MAAM;EAChB;EAEAC,WAAW;IAET;IACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,KAAK,CAAC;IAEzC;IACA,IAAIF,KAAK,IAAI,CAAC,IAAI,CAACH,SAAS,CAACM,cAAc,CAACH,KAAK,CAAC,EAAC;MACjD,OAAO,IAAI;;IAEb,IAAI,CAACF,MAAM,CAACM,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;IAC/B,OAAO,KAAK;EACd;;AAlBST,SAAS;mBAATA,SAAS;AAAA;AAATA,SAAS;SAATA,SAAS;EAAAU,SAATV,SAAS;EAAAW,YAFR;AAAM","names":["AuthGuard","constructor","jwtHelper","router","canActivate","token","localStorage","getItem","isTokenExpired","navigate","factory","providedIn"],"sourceRoot":"","sources":["/Users/abrahaminyaka/sources/inyakaabraham/Hobby-Project/blogFrontend/src/app/guard/auth-guard.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { JwtHelperService } from '@auth0/angular-jwt';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n    constructor(\n      private jwtHelper: JwtHelperService, \n      private router: Router) {\n    }\n    \n    canActivate() {\n  \n      //get the jwt token which are present in the local storage\n      const token = localStorage.getItem(\"jwt\");\n  \n      //Check if the token is expired or not and if token is expired then redirect to login page and return false\n      if (token && !this.jwtHelper.isTokenExpired(token)){\n        return true;\n      }\n      this.router.navigate([\"login\"]);\n      return false;\n    }\n  }\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}