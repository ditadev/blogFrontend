{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { catchError, throwError, retry } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  constructor(http) {\n    this.http = http;\n    this.authorUrl = `http://localhost:5259/api/Author`;\n    this.articleUrl = `http://localhost:5259/api/Blog`;\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  registerAuthor(author) {\n    return this.http.post(`${this.authorUrl}/Register`, author, this.httpOptions).pipe(retry(1), catchError(this.handleError));\n  }\n  verifyAuthor(email, token) {\n    return this.http.patch(`${this.authorUrl}/VerifyUser?emailAddress=${email}&token=${token}`, this.httpOptions).pipe(retry(1), catchError(this.handleError));\n  }\n  login(author) {\n    return this.http.post(`${this.authorUrl}/Login`, author, this.httpOptions).pipe(retry(1), catchError(this.handleError));\n  }\n  forgotPassword(email) {\n    return this.http.post(`${this.authorUrl}/ForgotPassword?emailAddress=${email}`, this.httpOptions).pipe(retry(1), catchError(this.handleError));\n  }\n  resetPassword(author) {\n    return this.http.patch(`${this.authorUrl}/ResetPassword`, author, this.httpOptions).pipe(retry(1), catchError(this.handleError));\n  }\n  getUser(id) {\n    const url = `${this.authorUrl}/GetAuthorById?id=${id}`;\n    return this.http.get(url).pipe(retry(1), catchError(this.handleError));\n  }\n  getArticles(id) {\n    const url = `${this.authorUrl}/GetAuthorById?id=${id}`;\n    return this.http.get(url).pipe(retry(1), catchError(this.handleError));\n  }\n  handleError(error) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Get client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Get server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    window.alert(errorMessage);\n    return throwError(() => {\n      return errorMessage;\n    });\n  }\n}\nApiService.ɵfac = function ApiService_Factory(t) {\n  return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n};\nApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApiService,\n  factory: ApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","catchError","throwError","retry","ApiService","constructor","http","headers","registerAuthor","author","post","authorUrl","httpOptions","pipe","handleError","verifyAuthor","email","token","patch","login","forgotPassword","resetPassword","getUser","id","url","get","getArticles","error","errorMessage","ErrorEvent","message","status","window","alert","factory","providedIn"],"sourceRoot":"","sources":["/Users/abb/sources/inyakaabraham/Hobby-Project/blogFrontend/src/app/services/api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { catchError, Observable, throwError,retry } from 'rxjs';\nimport { AuthorResponse } from '../models/author-response';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n\n  private authorUrl = `http://localhost:5259/api/Author`;\n  private articleUrl = `http://localhost:5259/api/Blog`;\n\n  httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  };\n  \n  constructor(private http:HttpClient) { }\n\n  public registerAuthor(author: any): Observable<any> {\n    return this.http.post(`${this.authorUrl}/Register`, author, this.httpOptions).pipe(retry(1), catchError(this.handleError));\n  }\n\n  public verifyAuthor(email: string, token:string): Observable<any> {\n    return this.http.patch(`${this.authorUrl}/VerifyUser?emailAddress=${email}&token=${token}`, this.httpOptions).pipe(retry(1), catchError(this.handleError));\n  }\n\n   public login(author: any): Observable<any> {\n    return this.http.post(`${this.authorUrl}/Login`, author, this.httpOptions).pipe(retry(1), catchError(this.handleError));\n  }\n\n  public forgotPassword(email: string): Observable<any> {\n    return this.http.post(`${this.authorUrl}/ForgotPassword?emailAddress=${email}`, this.httpOptions).pipe(retry(1), catchError(this.handleError));\n  }\n\n  public resetPassword(author: any):Observable<any>{\n    return this.http.patch(`${this.authorUrl}/ResetPassword`, author, this.httpOptions).pipe(retry(1), catchError(this.handleError));\n  }\n\n  public getUser(id: any):Observable<any>{\n    const url = `${this.authorUrl}/GetAuthorById?id=${id}`;\n    return this.http.get<AuthorResponse>(url).pipe(retry(1), catchError(this.handleError));\n  }\n\n  public getArticles(id: any):Observable<any>{\n    const url = `${this.authorUrl}/GetAuthorById?id=${id}`;\n    return this.http.get<AuthorResponse>(url).pipe(retry(1), catchError(this.handleError));\n  }\n\n  handleError(error: any) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Get client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Get server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    window.alert(errorMessage);\n    return throwError(() => {\n      return errorMessage;\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}